{"version":3,"sources":["webpack:///webpack/bootstrap 0682ac5baf053c874c01","webpack:///./datagrid/util.js","webpack:///./datagrid/MetaData.js","webpack:///./datagrid/Grid.js","webpack:///./datagrid/DataView.js","webpack:///./datagrid/Dimension.js","webpack:///./datagrid/Canvas.js","webpack:///./datagrid/ViewPort.js","webpack:///./datagrid/Columns.js","webpack:///./datagrid/Header.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC3DA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,2BAA2B,QAAQ;AACnC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;ACtFA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DkB;AACA;AAClB;AACiB;AACM;AACN;AACM;AACO;;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAcA;;;;;;;;;;;;AC7BiB;AACe;;AAEhC;AACA,iBAAiB,oDAAoD;AACrE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,oBAAoB;AAC1C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,kDAAkD,OAAO;AACzD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;AC3TA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;ACvFA;AAAA;AACA;AACA;AACA;AACc;;AAEd;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C,sBAAsB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;ACnJA;AACA,oCAAoC,8FAA8F,GAAG;AACrI;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;AC1EA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA","file":"grid.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0682ac5baf053c874c01","\r\n\r\nconst reg_coord = /([A-Z]+)([0-9]+)/;\r\n\r\n\r\n/**\r\n * Converts an index to a BASE 26 string where 1 = A.\r\n * @param index\r\n * @returns {string}\r\n */\r\nexport function stringFromColumnIndex(index) {\r\n    let ret = \"\";\r\n    index++;\r\n\r\n    while(index > 0) {\r\n        index--;\r\n        let r = index % 26,\r\n            d = String.fromCharCode(r + 65);\r\n\r\n        ret = d + ret;\r\n        index = (index - r) / 26;\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\n\r\n/**\r\n * Converts the BASE 26 letter string back into a number.\r\n * @param s\r\n * @returns {number}\r\n */\r\nexport function stringToIndex(s) {\r\n    let r = 0;\r\n\r\n    for(let i = s.length-1; i >= 0; i--) {\r\n        let p = (s.length-1) - i,\r\n            c = s.charCodeAt(i) - 64;\r\n\r\n        r += Math.pow(26, p)*c;\r\n    }\r\n\r\n    r--;\r\n    return r;\r\n}\r\n\r\n\r\n/**\r\n * Takes an x, y pair and converts it into a cell coordinate.\r\n * @param x\r\n * @param y\r\n * @returns {string}\r\n */\r\nexport function coordinateString(x, y) {\r\n    return stringFromColumnIndex(x) + (y+1);\r\n}\r\n\r\n\r\n/**\r\n * Takes a cell coordinate and returns an x, y pair.\r\n * @param c\r\n * @returns {[null,null]}\r\n */\r\nexport function fromCoordinateString(c) {\r\n    let reg = reg_coord.exec(c),\r\n        x = reg[1],\r\n        y = reg[2];\r\n\r\n    return [stringToIndex(x), parseInt(y, 10)-1];\r\n}\r\n\r\n\r\nexport function randomChoice(array) {\r\n    let c = Math.floor(Math.random() * array.length);\r\n    return array[c];\r\n}\r\n\r\n\r\nexport function clamp(value, min=null, max=null) {\r\n    if(min != null) {\r\n        value = Math.max(min, value);\r\n    }\r\n\r\n    if(max != null) {\r\n        value = Math.min(max, value);\r\n    }\r\n\r\n    return value;\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/util.js\n// module id = 0\n// module chunks = 0","\r\n\r\nexport class MetaData {\r\n    constructor(metadata) {\r\n        this.data = {};\r\n        this.dataCache = {};\r\n\r\n        if(metadata) this.setMetaData(metadata);\r\n    }\r\n\r\n    clear() {\r\n        this.data = {};\r\n        this.dataCache = {};\r\n    }\r\n\r\n    set(index, key, value) {\r\n        if(!this.data[index]) {\r\n            this.data[index] = {};\r\n        }\r\n\r\n        if(arguments.length === 2 && typeof key === \"object\") {\r\n            Object.assign(this.data[index], key);\r\n        } else {\r\n            this.data[index][key] = value;\r\n        }\r\n    }\r\n\r\n    get(index, key) {\r\n        if(this.data[index]) {\r\n            return this.data[index][key];\r\n        }\r\n    }\r\n\r\n    remove(index, key) {\r\n        if(this.data[index]) {\r\n            delete this.data[index][key];\r\n        }\r\n    }\r\n\r\n    cache(index, key, value) {\r\n        if(arguments.length === 1) {\r\n            return this.dataCache[index];\r\n        } else if(arguments.length === 2) {\r\n            return this.dataCache[index] ? this.dataCache[index][key] : undefined;\r\n        } else if(arguments.length === 3) {\r\n            if(value === undefined) {\r\n                if(this.dataCache[index]) {\r\n                    delete this.dataCache[index][key];\r\n                }\r\n            } else {\r\n                if(!this.dataCache[index]) {\r\n                    this.dataCache[index] = {};\r\n                }\r\n\r\n                this.dataCache[index][key] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/MetaData.js\n// module id = 1\n// module chunks = 0","import {DataModel} from \"./DataView\";\r\nimport {Dimension} from \"./Dimension\";\r\nimport * as util from \"./util\";\r\nimport {MetaData} from \"./MetaData\";\r\nimport {$GridDivCanvas} from \"./Canvas\";\r\nimport {ViewPort} from \"./ViewPort\";\r\nimport {CheckboxColumn} from \"./Columns\";\r\nimport {GridHeader, ColumnRow} from \"./Header\";\r\n\r\n\r\nclass StandardGrid {\r\n    constructor(container, model) {\r\n        this.viewport = null;\r\n        this.model = null;\r\n        this.canvas = null;\r\n        this.container = null;\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    DataModel,\r\n    Dimension,\r\n    util,\r\n    MetaData,\r\n    $GridDivCanvas,\r\n    ViewPort,\r\n    CheckboxColumn,\r\n    StandardGrid,\r\n    GridHeader,\r\n    ColumnRow\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/Grid.js\n// module id = 2\n// module chunks = 0","\r\n\r\nimport {MetaData} from \"./MetaData\";\r\nimport {clamp, coordinateString} from \"./util\";\r\n\r\nexport class DataModel {\r\n    constructor({data, columns, rowHeight=25, defaultColumnWidth=100}) {\r\n        this.rowHeight = rowHeight;\r\n        this.defaultColumnWidth = defaultColumnWidth;\r\n        this.data = null;\r\n\r\n        this.rowData = new MetaData();\r\n        this.cellData = new MetaData();\r\n        this.columnData = new MetaData();\r\n\r\n        if(data) this.setData(data);\r\n        if(columns) this.setColumns(columns);\r\n    }\r\n\r\n    /**\r\n     * Sets the model's data property.  The data should be a list of objects that contain the data to display on the grid\r\n     * or an object that implements the GetItemInterface.\r\n     * @param data\r\n     */\r\n    setData(data) {\r\n        this.rowData.clear();\r\n        this.cellData.clear();\r\n        this.data = data;\r\n    }\r\n\r\n    /**\r\n     * Sets the settings for all columns on the grid.\r\n     * @param columns\r\n     */\r\n    setColumns(columns) {\r\n        this.columnData.clear();\r\n\r\n        for(let i = 0; i < columns.length; i++) {\r\n            this.columnData.set(i, columns[i]);\r\n        }\r\n\r\n        this.columnData.length = columns.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the total row count.\r\n     * If the data hasn't been set returns 0.\r\n     * @returns {Number}\r\n     */\r\n    getDataLength() {\r\n        if(this.data) {\r\n            if(this.data.getDataLength) {\r\n                return this.data.getDataLength();\r\n            } else {\r\n                return this.data.length;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the data object at the given index or undefined if the object could not be found.\r\n     * @param index\r\n     * @returns {Object}\r\n     */\r\n    getDataItem(index) {\r\n        if(this.data) {\r\n            if(this.data.getDataItem) {\r\n                return this.data.getDataItem(index);\r\n            } else {\r\n                return this.data[index];\r\n            }\r\n        }\r\n    }\r\n\r\n    getColumn(index) {\r\n        if(index < 0 || index >= this.getColumnLength()) {\r\n            throw new Error(\"Cell Number is out of bounds.\");\r\n        }\r\n\r\n        return new Column(this, index);\r\n    }\r\n\r\n    getColumnLength() {\r\n        return this.columnData.length;\r\n    }\r\n\r\n    getRow(rowNumber) {\r\n        if(rowNumber < 0 || rowNumber >= this.getDataLength()) {\r\n            throw new Error(\"Row Number is out of bounds.\");\r\n        }\r\n\r\n        return new Row(this, rowNumber);\r\n    }\r\n\r\n    getCell(rowNumber, cellNumber) {\r\n        if(rowNumber < 0 || rowNumber >= this.getDataLength()) {\r\n            throw new Error(\"Row Number is out of bounds.\");\r\n        }\r\n\r\n        if(cellNumber < 0 || cellNumber >= this.getColumnLength()) {\r\n            throw new Error(\"Cell Number is out of bounds.\");\r\n        }\r\n\r\n        return new Cell(this, rowNumber, cellNumber);\r\n    }\r\n\r\n    getWidth() {\r\n        let r = 0;\r\n\r\n        for(let i = 0, l = this.getColumnLength(); i < l; i++) {\r\n            let column = this.getColumn(i);\r\n            r += column.getWidth();\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.getDataLength()*this.rowHeight;\r\n    }\r\n}\r\n\r\n\r\nclass Row {\r\n    constructor(model, index) {\r\n        this.model = model;\r\n        this.rowNumber = index;\r\n    }\r\n\r\n    getAttributes() {\r\n        return this.model.rowData.get(\"attributes\") || {};\r\n    }\r\n\r\n    getStyle() {\r\n        return this.model.rowData.get(\"style\") || {};\r\n    }\r\n\r\n    getClasses() {\r\n        return this.model.rowData.get(\"classes\") || \"\";\r\n    }\r\n\r\n    getCell(cell_number) {\r\n        return new Cell(this.model, this.rowNumber, cell_number);\r\n    }\r\n\r\n    getHeight() {\r\n        return this.model.rowHeight;\r\n    }\r\n\r\n    getDataItem() {\r\n        return this.model.getDataItem(this.rowNumber);\r\n    }\r\n\r\n    setMetaData(key, value) {\r\n        this.model.rowData.set(this.rowNumber, key, value);\r\n    }\r\n\r\n    getMetaData(key) {\r\n        return this.model.rowData.get(this.rowNumber, key);\r\n    }\r\n\r\n    getTop() {\r\n        return this.rowNumber * this.model.rowHeight;\r\n    }\r\n}\r\n\r\n\r\nclass Cell {\r\n    constructor(model, rowNumber, cellNumber) {\r\n        this.model = model;\r\n        this.rowNumber = rowNumber;\r\n        this.cellNumber = cellNumber;\r\n    }\r\n\r\n    getInheritedObject(key, rowKey, columnKey) {\r\n        let r = {},\r\n            d = this.model.columnData.get(this.cellNumber, columnKey);\r\n\r\n        if(d) Object.assign(r, d);\r\n        d = this.model.rowData.get(this.rowNumber, rowKey);\r\n        if(d) Object.assign(r, d);\r\n        d = this.model.cellData.get(this.cellNumber, key);\r\n        if(d) Object.assign(r, d);\r\n        return r;\r\n    }\r\n\r\n    getInheritedProperty(key, rowKey, columnKey) {\r\n        let r = this.model.cellData.get(this.cellNumber, key);\r\n        if(r !== undefined) return r;\r\n        r = this.model.rowData.get(this.rowNumber, rowKey);\r\n        if(r !== undefined) return r;\r\n        return this.model.columnData.get(this.cellNumber, columnKey);\r\n    }\r\n\r\n    getRow() {\r\n        return new Row(this.model, this.rowNumber);\r\n    }\r\n\r\n    getColumn() {\r\n        return new Column(this.model, this.cellNumber);\r\n    }\r\n\r\n    getAttributes() {\r\n        return this.getInheritedObject(\"attributes\", \"cellAttributes\", \"cellAttributes\");\r\n    }\r\n\r\n    getStyle() {\r\n        return this.getInheritedObject(\"style\", \"cellStyle\", \"cellStyle\");\r\n    }\r\n\r\n    getClasses() {\r\n        return this.getInheritedObject(\"classes\", \"cellClasses\", \"cellClasses\");\r\n    }\r\n\r\n    getValue() {\r\n        let formatter = this.getInheritedProperty(\"formatter\", \"cellFormatter\", \"cellFormatter\");\r\n        return formatter ? formatter(this) : this.getRawValue();\r\n    }\r\n\r\n    getRawValue() {\r\n        let id = this.model.columnData.get(this.cellNumber, \"id\");\r\n\r\n        if(id) {\r\n            return this.model.getDataItem(this.rowNumber)[id];\r\n        }\r\n    }\r\n\r\n    getIndex() {\r\n        return coordinateString(this.cellNumber, this.rowNumber);\r\n    }\r\n\r\n    setMetaData(key, value) {\r\n        this.model.cellData.set(this.getIndex(), key, value);\r\n    }\r\n\r\n    getMetaData(key) {\r\n        return this.model.cellData.get(this.getIndex(), key);\r\n    }\r\n\r\n    getWidth() {\r\n        return this.getColumn(this.cellNumber).getWidth();\r\n    }\r\n\r\n    handleEvent(event) {\r\n        let handle;\r\n\r\n        if(event.type === \"click\") {\r\n            handle = \"onClick\";\r\n        } else if(event.type === \"change\") {\r\n            handle = \"onChange\";\r\n        }\r\n\r\n        handle = this.getInheritedProperty(handle, handle, handle);\r\n\r\n        if(handle) {\r\n            handle(this, event);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Column {\r\n    constructor(model, columnNumber) {\r\n        this.model = model;\r\n        this.columnNumber = columnNumber;\r\n    }\r\n\r\n    getLabel() {\r\n        let label = this.getMetaData(\"label\") || \"\";\r\n\r\n        if(typeof label === \"function\") {\r\n            return label(this);\r\n        }\r\n\r\n        return label;\r\n    }\r\n\r\n    getWidth() {\r\n        let width = this.getMetaData(\"width\");\r\n\r\n        if(width == null) {\r\n            return this.model.defaultColumnWidth;\r\n        }\r\n\r\n        return width;\r\n    }\r\n\r\n    setMetaData(key, value) {\r\n        this.model.columnData.set(this.columnNumber, key, value);\r\n    }\r\n\r\n    getMetaData(key) {\r\n        return this.model.columnData.get(this.columnNumber, key);\r\n    }\r\n\r\n    getCell(index) {\r\n        return new Cell(this.model, index, this.columnNumber);\r\n    }\r\n\r\n    getStyle() {\r\n        return this.getMetaData(\"style\") || {};\r\n    }\r\n\r\n    getAttributes() {\r\n        return this.getMetaData(\"attributes\") || {};\r\n    }\r\n\r\n    getClasses() {\r\n        return this.getMetaData(\"classes\") || \"\";\r\n    }\r\n}\r\n\r\n\r\nDataModel.Column = Column;\r\nDataModel.Cell = Cell;\r\nDataModel.Row = Row;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/DataView.js\n// module id = 3\n// module chunks = 0","\r\n\r\nexport class Dimension {\r\n    constructor(length, bucketSize=null, defaultSize) {\r\n        this.length = length;\r\n        this.bucketSize = bucketSize === null ? Math.floor(Math.sqrt(this.length)) : bucketSize;\r\n        this.bucketLength = Math.ceil(this.length / this.bucketSize);\r\n        this.defaultSize = defaultSize;\r\n\r\n        this.buckets = {};\r\n        this.start = null;\r\n        this.end = null;\r\n    }\r\n\r\n    getBucket(index) {\r\n        // Sanity check\r\n        if(index < 0 || index >= this.bucketLength) {\r\n            throw new Error(index + \" is out of bounds.\");\r\n        }\r\n\r\n        if(this.buckets[index]) {\r\n            return this.buckets[index];\r\n        }\r\n\r\n        if(!this.start || this.start.index > index) {\r\n            let r = new Bucket(this, index);\r\n            if(this.start && this.start.index > index) r.setNext(this.start);\r\n            return r;\r\n        }\r\n\r\n        let i = index;\r\n\r\n        while(i--) {\r\n            if(this.buckets[i]) {\r\n                let r = new Bucket(this, index);\r\n                r.setPrevious(this.buckets[i]);\r\n                return r;\r\n            }\r\n        }\r\n\r\n        return new Bucket(this, index);\r\n    }\r\n}\r\n\r\n\r\nclass Bucket {\r\n    constructor(dimension, index) {\r\n        this.index = index;\r\n        this.dimension = dimension;\r\n\r\n        this.length = this.index === this.dimension.bucketLength-1 ? (this.dimension.length % this.dimension.bucketSize) : this.dimension.bucketSize;\r\n        this.prev = null;\r\n        this.next = null;\r\n        this.position = this.index * this.dimension.defaultSize * this.length;\r\n        this.size = this.length * this.dimension.defaultSize;\r\n    }\r\n\r\n    setPrevious(bucket) {\r\n        this.prev = bucket;\r\n        this.position = this.prev.position + this.prev.size + ((this.index - this.prev.index - 1) * this.dimension.defaultSize * this.dimension.bucketSize);\r\n    }\r\n\r\n    setNext(bucket) {\r\n        this.next = bucket;\r\n    }\r\n\r\n    isInserted() {\r\n        return this.prev && this.prev.next === this || this.dimension.start === this;\r\n    }\r\n}\r\n\r\n\r\nclass SizeNode {\r\n    constructor() {\r\n        this.children = {};\r\n        this.start = null;\r\n        this.index = 0;\r\n\r\n        this.parent = null;\r\n        this.root = null;\r\n        this.nextSibling = null;\r\n        this.previousSibling = null;\r\n\r\n        this.position = 0;\r\n        this.size = 0;\r\n        this.length = 0;\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/Dimension.js\n// module id = 4\n// module chunks = 0","/**\r\n * A canvas object is responsible for drawing the currently viewable parts of the data model to the screen and catching\r\n * and passing events that happen to those element to the grid.\r\n */\r\nimport {clamp} from \"./util\";\r\n\r\nexport class $GridDivCanvas {\r\n    constructor(container=null) {\r\n        this.canvas = $(\"<div>\").addClass(\"grid-canvas\").css({\r\n            position: \"relative\"\r\n        });\r\n\r\n        if(container) {\r\n            this.canvas.appendTo(container);\r\n        }\r\n\r\n        this.canvas.on(\"change click\", (event) => {\r\n            let $target = $(event.target),\r\n                $cell = $target.closest(\".grid-cell\", this.canvas),\r\n                x = $cell.data(\"cellNumber\"),\r\n                y = $cell.data(\"rowNumber\"),\r\n                cell = this.model.getCell(y, x);\r\n\r\n            cell.handleEvent(event);\r\n        });\r\n    }\r\n\r\n    setDataModel(model) {\r\n        this.model = model;\r\n    }\r\n\r\n    setViewPort(x, y, width, height) {\r\n        this.viewport = {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let rowRange = this.getRowRange(this.viewport.y, this.viewport.y + this.viewport.height),\r\n            columnRange = this.getColumnRange(this.viewport.x, this.viewport.x + this.viewport.width),\r\n            rowPos = 0,\r\n            totalWidth = this.model.getWidth(),\r\n            frag = document.createDocumentFragment();\r\n\r\n        this.canvas.css({\r\n            height: this.model.getHeight(),\r\n            width: totalWidth\r\n        });\r\n\r\n        for(let y = rowRange.start; y < rowRange.stop; y++) {\r\n            let cellPos = 0,\r\n                row = this.model.getRow(y),\r\n                top = row.getTop(),\r\n                rowHeight = row.getHeight(),\r\n                $row = $(\"<div>\").addClass(\"grid-row\").css({\r\n                    position: \"absolute\",\r\n                    top: top,\r\n                    height: rowHeight,\r\n                    width: totalWidth\r\n                });\r\n\r\n            $row.addClass(row.getClasses());\r\n            $row.attr(row.getAttributes());\r\n            $row.css(row.getStyle());\r\n            $row.data(\"rowNumber\", row.rowNumber);\r\n            $row.attr(\"data-row-number\", row.rowNumber);\r\n            rowPos += row.getHeight();\r\n\r\n            for(let x = columnRange.start; x < columnRange.stop; x++) {\r\n                let cell = row.getCell(x),\r\n                    cellWidth = cell.getWidth(),\r\n                    $cell = $(\"<div class='grid-cell'>\").css({\r\n                        position: \"absolute\",\r\n                        left: cellPos,\r\n                        width: cellWidth,\r\n                        height: rowHeight\r\n                    });\r\n\r\n                cellPos += cellWidth;\r\n\r\n                $cell.append(cell.getValue());\r\n                $cell.data({\r\n                    \"cellNumber\": cell.cellNumber,\r\n                    \"rowNumber\": row.rowNumber\r\n                });\r\n                $cell.attr(\"data-cell-number\", cell.cellNumber);\r\n                $cell.css(cell.getStyle());\r\n                $cell.attr(cell.getAttributes());\r\n                $cell.addClass(cell.getClasses());\r\n\r\n                $row.append($cell);\r\n            }\r\n\r\n            $row.appendTo(frag);\r\n        }\r\n\r\n        this.canvas.empty();\r\n        this.canvas.append(frag);\r\n    }\r\n\r\n    appendTo(element) {\r\n        return this.canvas.appendTo(element);\r\n    }\r\n\r\n    getRowRange(start, stop) {\r\n        let l = this.model.getDataLength();\r\n\r\n        return {\r\n            start: clamp(Math.floor(start / this.model.rowHeight), 0, l),\r\n            stop: clamp(Math.floor(stop / this.model.rowHeight), 0, l)\r\n        };\r\n    }\r\n\r\n    getColumnRange(start, stop) {\r\n        let pos = 0,\r\n            r = {},\r\n            column,\r\n            i = 0,\r\n            l = this.model.getColumnLength();\r\n\r\n        r.start = 0;\r\n        r.stop = l;\r\n\r\n        for(; i < l; i++) {\r\n            column = this.model.getColumn(i);\r\n            pos += column.getWidth();\r\n            r.start = i;\r\n\r\n            if(pos > start) {\r\n                i++;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for(; i < l; i++) {\r\n            column = this.model.getColumn(i);\r\n            pos += column.getWidth();\r\n            r.stop = i + 1;\r\n\r\n            if(pos >= stop) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return r;\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/Canvas.js\n// module id = 5\n// module chunks = 0","\r\n\r\nexport class ViewPort {\r\n    constructor(container, canvas, {increment=400, verticalPadding=1000, horizontalPadding=1000, speedLimit=1000, refreshRate=100}={}) {\r\n        this.viewport = $(\"<div class='grid-viewport'>\");\r\n\r\n        if(container) {\r\n            this.viewport.appendTo(container);\r\n        }\r\n\r\n        if(canvas) this.setCanvas(canvas);\r\n\r\n        this._onScroll = this.onScroll.bind(this);\r\n        this.viewport.on(\"scroll\", this._onScroll);\r\n\r\n        this.increment = increment;\r\n        this.verticalPadding = verticalPadding;\r\n        this.horizontalPadding = horizontalPadding;\r\n        this.speedLimit = speedLimit;\r\n        this.refreshRate = refreshRate;\r\n\r\n        this._left = 0;\r\n        this._top = 0;\r\n        this._incrementX = 0;\r\n        this._incrementY = 0;\r\n    }\r\n\r\n    setCanvas(canvas) {\r\n        this.canvas = canvas;\r\n        canvas.appendTo(this.viewport);\r\n    }\r\n\r\n    onScroll() {\r\n        this._left = this.viewport.scrollLeft();\r\n        this._top = this.viewport.scrollTop();\r\n\r\n        if(!this._timer) {\r\n            let x = this._left,\r\n                y = this._top;\r\n\r\n            let onTimeout = () => {\r\n                if(this.speedLimit && (Math.abs(x - this._left) > this.speedLimit || Math.abs(y - this._top) > this.speedLimit)) {\r\n                    x = this._left;\r\n                    y = this._top;\r\n                    this._timer = setTimeout(onTimeout, this.refreshRate);\r\n                    return;\r\n                }\r\n\r\n                this._timer = null;\r\n\r\n                let incrementX = Math.floor(this._left / this.increment),\r\n                    incrementY = Math.floor(this._top / this.increment);\r\n\r\n                if(incrementX === this._incrementX && incrementY === this._incrementY) {\r\n                    return;\r\n                }\r\n\r\n                this.refresh();\r\n            };\r\n\r\n            this._timer = setTimeout(onTimeout, this.refreshRate);\r\n        }\r\n    }\r\n\r\n    refresh() {\r\n        this._incrementX = Math.floor(this._left / this.increment);\r\n        this._incrementY = Math.floor(this._top / this.increment);\r\n\r\n        let left = this._left,\r\n            top = this._top,\r\n            width = this.viewport.innerWidth(),\r\n            height = this.viewport.innerHeight();\r\n\r\n        this.canvas.setViewPort(left-this.horizontalPadding, top-this.verticalPadding, width+(this.horizontalPadding*2), height+(this.verticalPadding*2));\r\n        this.canvas.render();\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/ViewPort.js\n// module id = 6\n// module chunks = 0","\r\n\r\nexport class CheckboxColumn {\r\n    constructor(name) {\r\n        this.inputName = name;\r\n\r\n        this.cellFormatter = function(cell) {\r\n            let checked = cell.getMetaData(\"checked\") || false,\r\n                inputName = cell.getMetaData(\"inputName\"),\r\n                r = $(\"<input type='checkbox' name='\"+inputName+\"'>\");\r\n\r\n            if(checked) {\r\n                r.prop(\"checked\", true);\r\n            }\r\n\r\n            return r;\r\n        };\r\n\r\n        this.onChange = function(cell, event) {\r\n            let val = $(event.target).is(\":checked\");\r\n            console.log(\"changed\", val);\r\n            cell.setMetaData(\"checked\", val);\r\n        };\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/Columns.js\n// module id = 7\n// module chunks = 0","\r\n\r\nexport class GridHeader {\r\n    constructor() {\r\n        this.view = $(\"<div class='grid-header'>\");\r\n        this.viewport = $(\"<div class='grid-header-viewport'>\");\r\n        this.viewport.css({\r\n            \"overflow-x\": \"hidden\",\r\n            position: \"relative\",\r\n            height: 25\r\n        });\r\n        this.view.append(this.viewport);\r\n    }\r\n\r\n    bindToViewPort(viewport) {\r\n        if(viewport.viewport) {\r\n            viewport = $(viewport.viewport);\r\n        } else {\r\n            viewport = $(viewport);\r\n        }\r\n\r\n        viewport.on(\"scroll\", (event) => {\r\n            this.viewport.scrollLeft($(event.target).scrollLeft());\r\n        });\r\n    }\r\n\r\n    appendTo(element) {\r\n        this.view.appendTo(element);\r\n    }\r\n\r\n    append(element) {\r\n        if(element.appendTo) {\r\n            element.appendTo(this.viewport);\r\n        } else {\r\n            this.viewport.append(element);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class ColumnRow {\r\n    constructor(model) {\r\n        this.model = model;\r\n        this.view = $(\"<div class='grid-column-row'>\").css({\r\n            position: \"relative\"\r\n        });\r\n    }\r\n\r\n    setViewport(viewport) {\r\n\r\n    }\r\n\r\n    render() {\r\n        let pos = 0;\r\n\r\n        this.view.css({\r\n            width: this.model.getWidth()\r\n        });\r\n\r\n        for(let i = 0, l = this.model.getColumnLength(); i < l; i++) {\r\n            let $column = $(\"<div class='grid-column'>\"),\r\n                column = this.model.getColumn(i),\r\n                name = column.getLabel(),\r\n                width = column.getWidth();\r\n\r\n            $column.addClass(column.getClasses());\r\n            $column.attr(column.getAttributes());\r\n            $column.css(column.getStyle());\r\n\r\n            $column.css({\r\n                position: \"absolute\",\r\n                width: width,\r\n                left: pos\r\n            });\r\n\r\n            pos += width;\r\n\r\n            $column.append(name);\r\n            this.view.append($column);\r\n        }\r\n    }\r\n\r\n    appendTo(element) {\r\n        this.view.appendTo(element);\r\n    }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./datagrid/Header.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}